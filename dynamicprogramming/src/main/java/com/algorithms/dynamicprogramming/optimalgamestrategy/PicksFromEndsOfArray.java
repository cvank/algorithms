package com.algorithms.dynamicprogramming.optimalgamestrategy;

/**
 * Created by chandrashekar.v on 4/28/2017.
 */
public class PicksFromEndsOfArray {

    public static void main(String[] args) {
        int[] values = {3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76, 3, 9, 1, 2, 12, 5, 6, 7, 10, 21, 34, 46, 12, 10, 9, 8, 7, 6, 123, 32, 145, 189, 123, 111, 1000, 21, 23, 34, 54, 56, 76};
        solve(values);
    }


    public static class XY {
        public int first;
        public int second;
        int pick = 0;
    }

    private static void solve(int[] values) {
        int m = values.length;
        XY[][] dp = new XY[m][m];


        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = new XY();
            }
        }

        for (int i = 0; i < m; i++) {
            dp[i][i].first = values[i];
            dp[i][i].second = 0;
            dp[i][i].pick = i;
        }

        for (int l = 2; l <= m; l++) {
            for (int i = 0; i <= m - l; i++) {
                int j = l + i - 1;
                if (values[i] + dp[i + 1][j].second > values[j] + dp[i][j - 1].second) {
                    dp[i][j].first = values[i] + dp[i + 1][j].second;
                    dp[i][j].second = dp[i + 1][j].first;
                    dp[i][j].pick = i;
                } else {
                    dp[i][j].first = values[j] + dp[i][j - 1].second;
                    dp[i][j].second = dp[i][j - 1].first;
                    dp[i][j].pick = j;
                }
            }
        }

        //print2DArray(m, dp);

        System.out.println("Winner total :" + dp[0][m - 1].first +", Loser total:"+ dp[0][m - 1].second);
        printSequence(values, dp);

    }

    private static void print2DArray(int m, XY[][] dp) {
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < m; j++) {
                System.out.printf("%4s", "(" + dp[i][j].first + ", " + dp[i][j].second + ")");
            }
            System.out.println();
        }
    }

    //prints the sequence of values and indexes
    public static void printSequence(int values[], XY dp[][]) {
        int i = 0;
        int j = values.length - 1;
        int step;
        for (int k = 0; k < values.length; k++) {
            step = dp[i][j].pick;
            //this is the value of pick and its index
            System.out.print("value: " + values[step] + " " + "index: " + step + " ");
            if (step <= i) {
                i = i + 1;
            } else {
                j = j - 1;
            }
        }
    }
}
